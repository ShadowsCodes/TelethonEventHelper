from sqlalchemy import func

import datetime
from dao import PlayerDao  as playerdao
from models.playermodel import player, playerstats
from gameenums.userclasses import UserStatus

def authenticate_player(tg_id):
    # Check if player is registered
    registered_player = is_registered(tg_id)
    if registered_player == True:
        # If player is registered check if player is banned
        ban_status = is_banned(tg_id)
        if ban_status == True:
            # Player has been banned
            return UserStatus.banned.value
        elif ban_status == False:
            # Player isn't banned and can access the game
            return UserStatus.user.value
    elif registered_player == False:
        # This player isn't registered in the game
        return UserStatus.new_user.value

def is_registered(tg_id):
    found_player = playerdao.get_player_by_player_id(tg_id)

    if found_player:
        return True
    else:
        return False

def is_banned(tg_id):
    found_player = playerdao.get_player_by_player_id(tg_id)

    if found_player:
        return found_player.banned

def register_player(username, tg_id, first_name, session):
    # Setting Player to DB
    new_player = player()
    new_player.tg_username = username
    new_player.tg_id =tg_id
    new_player.name = first_name
    new_player.banned = False
    new_player.max_health = 0
    new_player.max_mana = 0
    new_player.max_stock = 0
    new_player.cur_health = 0
    new_player.cur_mana = 0
    new_player.cur_stock = 0
    new_player.level = 0
    new_player.exp_need = 0
    new_player.exp_cur = 0
    new_player.cash = 50
    new_player.bank = 0
    new_player.latest_activity = datetime.datetime.utcnow()
    new_player.task = 'Idle'
    new_player.role =  1
    new_base = playerstats()
    new_base.attack = 0
    new_base.defence = 0
    new_base.crit_chance = 0
    new_base.crit_bonus = 0
    new_base.speed = 0
    session.add(new_player)
    session.add(new_base)

    # Submitting player
    session.commit()
